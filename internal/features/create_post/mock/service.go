// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_create_post is a generated GoMock package.
package mock_create_post

import (
	create_post "postservice/internal/features/create_post"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewPostMetaData mocks base method.
func (m *MockRepository) AddNewPostMetaData(id string, data *create_post.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPostMetaData", id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPostMetaData indicates an expected call of AddNewPostMetaData.
func (mr *MockRepositoryMockRecorder) AddNewPostMetaData(id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPostMetaData", reflect.TypeOf((*MockRepository)(nil).AddNewPostMetaData), id, data)
}
